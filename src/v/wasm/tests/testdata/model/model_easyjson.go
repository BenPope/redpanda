// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeRedpandaComWasmModel(in *jlexer.Lexer, out *GithubRepoData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "owner":
			easyjsonC80ae7adDecode(in, &out.Owner)
		case "name":
			out.Name = string(in.String())
		case "full_name":
			out.FullName = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "private":
			out.Private = bool(in.Bool())
		case "fork":
			out.Fork = bool(in.Bool())
		case "url":
			out.URL = string(in.String())
		case "html_url":
			out.HTMLURL = string(in.String())
		case "clone_url":
			out.CloneURL = string(in.String())
		case "git_url":
			out.GitURL = string(in.String())
		case "ssh_url":
			out.SSHURL = string(in.String())
		case "svn_url":
			out.SvnURL = string(in.String())
		case "mirror_url":
			out.MirrorURL = string(in.String())
		case "homepage":
			out.Homepage = string(in.String())
		case "language":
			if m, ok := out.Language.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Language.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Language = in.Interface()
			}
		case "forks_count":
			out.ForksCount = int(in.Int())
		case "stargazers_count":
			out.StargazersCount = int(in.Int())
		case "watchers_count":
			out.WatchersCount = int(in.Int())
		case "size":
			out.Size = int(in.Int())
		case "default_branch":
			out.DefaultBranch = string(in.String())
		case "open_issues_count":
			out.OpenIssuesCount = int(in.Int())
		case "has_issues":
			out.HasIssues = bool(in.Bool())
		case "has_wiki":
			out.HasWiki = bool(in.Bool())
		case "has_downloads":
			out.HasDownloads = bool(in.Bool())
		case "pushed_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PushedAt).UnmarshalJSON(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "permissions":
			easyjsonC80ae7adDecode1(in, &out.Permissions)
		case "subscribers_count":
			out.SubscribersCount = int(in.Int())
		case "organization":
			easyjsonC80ae7adDecode(in, &out.Organization)
		case "parent":
			easyjsonC80ae7adDecode2(in, &out.Parent)
		case "source":
			easyjsonC80ae7adDecode2(in, &out.Source)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeRedpandaComWasmModel(out *jwriter.Writer, in GithubRepoData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		easyjsonC80ae7adEncode(out, in.Owner)
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"full_name\":"
		out.RawString(prefix)
		out.String(string(in.FullName))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"private\":"
		out.RawString(prefix)
		out.Bool(bool(in.Private))
	}
	{
		const prefix string = ",\"fork\":"
		out.RawString(prefix)
		out.Bool(bool(in.Fork))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"html_url\":"
		out.RawString(prefix)
		out.String(string(in.HTMLURL))
	}
	{
		const prefix string = ",\"clone_url\":"
		out.RawString(prefix)
		out.String(string(in.CloneURL))
	}
	{
		const prefix string = ",\"git_url\":"
		out.RawString(prefix)
		out.String(string(in.GitURL))
	}
	{
		const prefix string = ",\"ssh_url\":"
		out.RawString(prefix)
		out.String(string(in.SSHURL))
	}
	{
		const prefix string = ",\"svn_url\":"
		out.RawString(prefix)
		out.String(string(in.SvnURL))
	}
	{
		const prefix string = ",\"mirror_url\":"
		out.RawString(prefix)
		out.String(string(in.MirrorURL))
	}
	{
		const prefix string = ",\"homepage\":"
		out.RawString(prefix)
		out.String(string(in.Homepage))
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		if m, ok := in.Language.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Language.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Language))
		}
	}
	{
		const prefix string = ",\"forks_count\":"
		out.RawString(prefix)
		out.Int(int(in.ForksCount))
	}
	{
		const prefix string = ",\"stargazers_count\":"
		out.RawString(prefix)
		out.Int(int(in.StargazersCount))
	}
	{
		const prefix string = ",\"watchers_count\":"
		out.RawString(prefix)
		out.Int(int(in.WatchersCount))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int(int(in.Size))
	}
	{
		const prefix string = ",\"default_branch\":"
		out.RawString(prefix)
		out.String(string(in.DefaultBranch))
	}
	{
		const prefix string = ",\"open_issues_count\":"
		out.RawString(prefix)
		out.Int(int(in.OpenIssuesCount))
	}
	{
		const prefix string = ",\"has_issues\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasIssues))
	}
	{
		const prefix string = ",\"has_wiki\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasWiki))
	}
	{
		const prefix string = ",\"has_downloads\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasDownloads))
	}
	{
		const prefix string = ",\"pushed_at\":"
		out.RawString(prefix)
		out.Raw((in.PushedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		easyjsonC80ae7adEncode1(out, in.Permissions)
	}
	{
		const prefix string = ",\"subscribers_count\":"
		out.RawString(prefix)
		out.Int(int(in.SubscribersCount))
	}
	{
		const prefix string = ",\"organization\":"
		out.RawString(prefix)
		easyjsonC80ae7adEncode(out, in.Organization)
	}
	{
		const prefix string = ",\"parent\":"
		out.RawString(prefix)
		easyjsonC80ae7adEncode2(out, in.Parent)
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		easyjsonC80ae7adEncode2(out, in.Source)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GithubRepoData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeRedpandaComWasmModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GithubRepoData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeRedpandaComWasmModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GithubRepoData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeRedpandaComWasmModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GithubRepoData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeRedpandaComWasmModel(l, v)
}
func easyjsonC80ae7adDecode2(in *jlexer.Lexer, out *struct {
	ID    int `json:"id"`
	Owner struct {
		Login             string `json:"login"`
		ID                int    `json:"id"`
		AvatarURL         string `json:"avatar_url"`
		GravatarID        string `json:"gravatar_id"`
		URL               string `json:"url"`
		HTMLURL           string `json:"html_url"`
		FollowersURL      string `json:"followers_url"`
		FollowingURL      string `json:"following_url"`
		GistsURL          string `json:"gists_url"`
		StarredURL        string `json:"starred_url"`
		SubscriptionsURL  string `json:"subscriptions_url"`
		OrganizationsURL  string `json:"organizations_url"`
		ReposURL          string `json:"repos_url"`
		EventsURL         string `json:"events_url"`
		ReceivedEventsURL string `json:"received_events_url"`
		Type              string `json:"type"`
		SiteAdmin         bool   `json:"site_admin"`
	} `json:"owner"`
	Name            string      `json:"name"`
	FullName        string      `json:"full_name"`
	Description     string      `json:"description"`
	Private         bool        `json:"private"`
	Fork            bool        `json:"fork"`
	URL             string      `json:"url"`
	HTMLURL         string      `json:"html_url"`
	CloneURL        string      `json:"clone_url"`
	GitURL          string      `json:"git_url"`
	SSHURL          string      `json:"ssh_url"`
	SvnURL          string      `json:"svn_url"`
	MirrorURL       string      `json:"mirror_url"`
	Homepage        string      `json:"homepage"`
	Language        interface{} `json:"language"`
	ForksCount      int         `json:"forks_count"`
	StargazersCount int         `json:"stargazers_count"`
	WatchersCount   int         `json:"watchers_count"`
	Size            int         `json:"size"`
	DefaultBranch   string      `json:"default_branch"`
	OpenIssuesCount int         `json:"open_issues_count"`
	HasIssues       bool        `json:"has_issues"`
	HasWiki         bool        `json:"has_wiki"`
	HasDownloads    bool        `json:"has_downloads"`
	PushedAt        time.Time   `json:"pushed_at"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
	Permissions     struct {
		Admin bool `json:"admin"`
		Push  bool `json:"push"`
		Pull  bool `json:"pull"`
	} `json:"permissions"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "owner":
			easyjsonC80ae7adDecode(in, &out.Owner)
		case "name":
			out.Name = string(in.String())
		case "full_name":
			out.FullName = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "private":
			out.Private = bool(in.Bool())
		case "fork":
			out.Fork = bool(in.Bool())
		case "url":
			out.URL = string(in.String())
		case "html_url":
			out.HTMLURL = string(in.String())
		case "clone_url":
			out.CloneURL = string(in.String())
		case "git_url":
			out.GitURL = string(in.String())
		case "ssh_url":
			out.SSHURL = string(in.String())
		case "svn_url":
			out.SvnURL = string(in.String())
		case "mirror_url":
			out.MirrorURL = string(in.String())
		case "homepage":
			out.Homepage = string(in.String())
		case "language":
			if m, ok := out.Language.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Language.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Language = in.Interface()
			}
		case "forks_count":
			out.ForksCount = int(in.Int())
		case "stargazers_count":
			out.StargazersCount = int(in.Int())
		case "watchers_count":
			out.WatchersCount = int(in.Int())
		case "size":
			out.Size = int(in.Int())
		case "default_branch":
			out.DefaultBranch = string(in.String())
		case "open_issues_count":
			out.OpenIssuesCount = int(in.Int())
		case "has_issues":
			out.HasIssues = bool(in.Bool())
		case "has_wiki":
			out.HasWiki = bool(in.Bool())
		case "has_downloads":
			out.HasDownloads = bool(in.Bool())
		case "pushed_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PushedAt).UnmarshalJSON(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "permissions":
			easyjsonC80ae7adDecode1(in, &out.Permissions)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncode2(out *jwriter.Writer, in struct {
	ID    int `json:"id"`
	Owner struct {
		Login             string `json:"login"`
		ID                int    `json:"id"`
		AvatarURL         string `json:"avatar_url"`
		GravatarID        string `json:"gravatar_id"`
		URL               string `json:"url"`
		HTMLURL           string `json:"html_url"`
		FollowersURL      string `json:"followers_url"`
		FollowingURL      string `json:"following_url"`
		GistsURL          string `json:"gists_url"`
		StarredURL        string `json:"starred_url"`
		SubscriptionsURL  string `json:"subscriptions_url"`
		OrganizationsURL  string `json:"organizations_url"`
		ReposURL          string `json:"repos_url"`
		EventsURL         string `json:"events_url"`
		ReceivedEventsURL string `json:"received_events_url"`
		Type              string `json:"type"`
		SiteAdmin         bool   `json:"site_admin"`
	} `json:"owner"`
	Name            string      `json:"name"`
	FullName        string      `json:"full_name"`
	Description     string      `json:"description"`
	Private         bool        `json:"private"`
	Fork            bool        `json:"fork"`
	URL             string      `json:"url"`
	HTMLURL         string      `json:"html_url"`
	CloneURL        string      `json:"clone_url"`
	GitURL          string      `json:"git_url"`
	SSHURL          string      `json:"ssh_url"`
	SvnURL          string      `json:"svn_url"`
	MirrorURL       string      `json:"mirror_url"`
	Homepage        string      `json:"homepage"`
	Language        interface{} `json:"language"`
	ForksCount      int         `json:"forks_count"`
	StargazersCount int         `json:"stargazers_count"`
	WatchersCount   int         `json:"watchers_count"`
	Size            int         `json:"size"`
	DefaultBranch   string      `json:"default_branch"`
	OpenIssuesCount int         `json:"open_issues_count"`
	HasIssues       bool        `json:"has_issues"`
	HasWiki         bool        `json:"has_wiki"`
	HasDownloads    bool        `json:"has_downloads"`
	PushedAt        time.Time   `json:"pushed_at"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
	Permissions     struct {
		Admin bool `json:"admin"`
		Push  bool `json:"push"`
		Pull  bool `json:"pull"`
	} `json:"permissions"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		easyjsonC80ae7adEncode(out, in.Owner)
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"full_name\":"
		out.RawString(prefix)
		out.String(string(in.FullName))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"private\":"
		out.RawString(prefix)
		out.Bool(bool(in.Private))
	}
	{
		const prefix string = ",\"fork\":"
		out.RawString(prefix)
		out.Bool(bool(in.Fork))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"html_url\":"
		out.RawString(prefix)
		out.String(string(in.HTMLURL))
	}
	{
		const prefix string = ",\"clone_url\":"
		out.RawString(prefix)
		out.String(string(in.CloneURL))
	}
	{
		const prefix string = ",\"git_url\":"
		out.RawString(prefix)
		out.String(string(in.GitURL))
	}
	{
		const prefix string = ",\"ssh_url\":"
		out.RawString(prefix)
		out.String(string(in.SSHURL))
	}
	{
		const prefix string = ",\"svn_url\":"
		out.RawString(prefix)
		out.String(string(in.SvnURL))
	}
	{
		const prefix string = ",\"mirror_url\":"
		out.RawString(prefix)
		out.String(string(in.MirrorURL))
	}
	{
		const prefix string = ",\"homepage\":"
		out.RawString(prefix)
		out.String(string(in.Homepage))
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		if m, ok := in.Language.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Language.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Language))
		}
	}
	{
		const prefix string = ",\"forks_count\":"
		out.RawString(prefix)
		out.Int(int(in.ForksCount))
	}
	{
		const prefix string = ",\"stargazers_count\":"
		out.RawString(prefix)
		out.Int(int(in.StargazersCount))
	}
	{
		const prefix string = ",\"watchers_count\":"
		out.RawString(prefix)
		out.Int(int(in.WatchersCount))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int(int(in.Size))
	}
	{
		const prefix string = ",\"default_branch\":"
		out.RawString(prefix)
		out.String(string(in.DefaultBranch))
	}
	{
		const prefix string = ",\"open_issues_count\":"
		out.RawString(prefix)
		out.Int(int(in.OpenIssuesCount))
	}
	{
		const prefix string = ",\"has_issues\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasIssues))
	}
	{
		const prefix string = ",\"has_wiki\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasWiki))
	}
	{
		const prefix string = ",\"has_downloads\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasDownloads))
	}
	{
		const prefix string = ",\"pushed_at\":"
		out.RawString(prefix)
		out.Raw((in.PushedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		easyjsonC80ae7adEncode1(out, in.Permissions)
	}
	out.RawByte('}')
}
func easyjsonC80ae7adDecode1(in *jlexer.Lexer, out *struct {
	Admin bool `json:"admin"`
	Push  bool `json:"push"`
	Pull  bool `json:"pull"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "admin":
			out.Admin = bool(in.Bool())
		case "push":
			out.Push = bool(in.Bool())
		case "pull":
			out.Pull = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncode1(out *jwriter.Writer, in struct {
	Admin bool `json:"admin"`
	Push  bool `json:"push"`
	Pull  bool `json:"pull"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"admin\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Admin))
	}
	{
		const prefix string = ",\"push\":"
		out.RawString(prefix)
		out.Bool(bool(in.Push))
	}
	{
		const prefix string = ",\"pull\":"
		out.RawString(prefix)
		out.Bool(bool(in.Pull))
	}
	out.RawByte('}')
}
func easyjsonC80ae7adDecode(in *jlexer.Lexer, out *struct {
	Login             string `json:"login"`
	ID                int    `json:"id"`
	AvatarURL         string `json:"avatar_url"`
	GravatarID        string `json:"gravatar_id"`
	URL               string `json:"url"`
	HTMLURL           string `json:"html_url"`
	FollowersURL      string `json:"followers_url"`
	FollowingURL      string `json:"following_url"`
	GistsURL          string `json:"gists_url"`
	StarredURL        string `json:"starred_url"`
	SubscriptionsURL  string `json:"subscriptions_url"`
	OrganizationsURL  string `json:"organizations_url"`
	ReposURL          string `json:"repos_url"`
	EventsURL         string `json:"events_url"`
	ReceivedEventsURL string `json:"received_events_url"`
	Type              string `json:"type"`
	SiteAdmin         bool   `json:"site_admin"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "avatar_url":
			out.AvatarURL = string(in.String())
		case "gravatar_id":
			out.GravatarID = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "html_url":
			out.HTMLURL = string(in.String())
		case "followers_url":
			out.FollowersURL = string(in.String())
		case "following_url":
			out.FollowingURL = string(in.String())
		case "gists_url":
			out.GistsURL = string(in.String())
		case "starred_url":
			out.StarredURL = string(in.String())
		case "subscriptions_url":
			out.SubscriptionsURL = string(in.String())
		case "organizations_url":
			out.OrganizationsURL = string(in.String())
		case "repos_url":
			out.ReposURL = string(in.String())
		case "events_url":
			out.EventsURL = string(in.String())
		case "received_events_url":
			out.ReceivedEventsURL = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "site_admin":
			out.SiteAdmin = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncode(out *jwriter.Writer, in struct {
	Login             string `json:"login"`
	ID                int    `json:"id"`
	AvatarURL         string `json:"avatar_url"`
	GravatarID        string `json:"gravatar_id"`
	URL               string `json:"url"`
	HTMLURL           string `json:"html_url"`
	FollowersURL      string `json:"followers_url"`
	FollowingURL      string `json:"following_url"`
	GistsURL          string `json:"gists_url"`
	StarredURL        string `json:"starred_url"`
	SubscriptionsURL  string `json:"subscriptions_url"`
	OrganizationsURL  string `json:"organizations_url"`
	ReposURL          string `json:"repos_url"`
	EventsURL         string `json:"events_url"`
	ReceivedEventsURL string `json:"received_events_url"`
	Type              string `json:"type"`
	SiteAdmin         bool   `json:"site_admin"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarURL))
	}
	{
		const prefix string = ",\"gravatar_id\":"
		out.RawString(prefix)
		out.String(string(in.GravatarID))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"html_url\":"
		out.RawString(prefix)
		out.String(string(in.HTMLURL))
	}
	{
		const prefix string = ",\"followers_url\":"
		out.RawString(prefix)
		out.String(string(in.FollowersURL))
	}
	{
		const prefix string = ",\"following_url\":"
		out.RawString(prefix)
		out.String(string(in.FollowingURL))
	}
	{
		const prefix string = ",\"gists_url\":"
		out.RawString(prefix)
		out.String(string(in.GistsURL))
	}
	{
		const prefix string = ",\"starred_url\":"
		out.RawString(prefix)
		out.String(string(in.StarredURL))
	}
	{
		const prefix string = ",\"subscriptions_url\":"
		out.RawString(prefix)
		out.String(string(in.SubscriptionsURL))
	}
	{
		const prefix string = ",\"organizations_url\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationsURL))
	}
	{
		const prefix string = ",\"repos_url\":"
		out.RawString(prefix)
		out.String(string(in.ReposURL))
	}
	{
		const prefix string = ",\"events_url\":"
		out.RawString(prefix)
		out.String(string(in.EventsURL))
	}
	{
		const prefix string = ",\"received_events_url\":"
		out.RawString(prefix)
		out.String(string(in.ReceivedEventsURL))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"site_admin\":"
		out.RawString(prefix)
		out.Bool(bool(in.SiteAdmin))
	}
	out.RawByte('}')
}
